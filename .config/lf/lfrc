# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 3
set icons
set nohidden
set period 1
set sortby ext
set hiddenfiles ".*:*.aux:*template.out:*template.toc:*.fls:*.fdb_latexmk:*.synctex.gz:*.out:*.xdv:*.log:*.bbl:*.bcf:*.blg:*.run.xml:*.srt:compile_flags.txt:compile_commands.json"
set promptfmt "\033[32m  \033[35;1m%d\033[0m\033[1m%f\033[0m"
set autoquit true

# Previewer
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

cmd open ${{
  case $(file --mime-type "$(readlink -f $f)" -b) in
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
    image/vnd.djvu|application/pdf|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
    text/html) $EDITOR $fx;;
    text/*|application/json|inode/x-empty|application/x-subrip|application/javascript) $EDITOR $fx;;
    image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
    image/svg+xml) display -- $f ;;
    image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
     setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
        [ -z "$file" ] && continue
        lf -remote "send select \"$file\""
        lf -remote "send toggle"
        done &
      ;;
    audio/*|video/x-ms-asf) setsid -f mpv --loop-file --profile=builtin-pseudo-gui $f ;;
    video/*) setsid -f mpv --loop-file $f -quiet >/dev/null 2>&1 ;;
    application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
    application/pgp-encrypted) $EDITOR $fx ;;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
    application/octet-stream) case ${f##*.} in
      doc|docx|xls|xlsx|odt|ppt|pptx) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
      ghw) setsid -f gtkwave $f >/dev/null 2>&1 ;;
      ts) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
      *) setsid -f zathura $fx >/dev/null 2>&1 ;;
    esac ;;
    *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
  esac
}}

cmd find_files ${{
  selected=$(fzf-fd)
  if [ -n "$selected" ]; then
    lf -remote "send $id set hidden"
    lf -remote "send $id select $selected"
  fi
}}

cmd compress ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	compressor $fx
}}

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	extractor $fx
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
  ans=$(echo -e "No\nYes" | fzf --prompt="Delete?" --ansi --border=block --margin=0,35% --no-info --height=7)
	[ $ans = "Yes" ] && trash-put $fx
}}

cmd git_branch ${{
  git branch | fzf | xargs git checkout
  pwd_shell=$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')
  lf -remote "send $id updir"
  lf -remote "send $id cd \"$pwd_shell\""
}}

cmd git_root ${{
  root="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ -n "$root" ]; then
      lf -remote "send $id cd $root"
  else
      printf "Not in a git repository"
      read -r _
      exit 1
  fi
}}

cmd resize-for-wallpaper ${{
  resolution=$(xrandr | grep '*' | awk '{print $1}' | head -n 1)
  default_resolution="1366x768"
  if [ -z "$resolution" ]; then
    resolution=$default_resolution
  fi
  for input_image in $fx; do
    filename=$(basename "$input_image")
    extension="${filename##*.}"
    filename="${filename%.*}"
    output_image="${filename}-${resolution}.${extension}"
    magick "$input_image" -resize "$resolution" "$output_image"
  done
}}

cmd extract-audio ${{
  for video in $fx; do
    mime_type=$(file --mime-type -b "$video")
    if [[ $mime_type == video/* ]]; then
      filename=$(basename -- "$video")
      extension="${filename##*.}"
      filename="${filename%.*}"
      ffmpeg -i "$video" -q:a 0 -map a "${filename}.mp3"
      echo "Audio extracted from $video and saved as ${filename}.mp3"
    else
      echo "$video is not a video file. Skipping."
    fi
  done
}}

cmd cycle_preview %{{
  if [ "$lf_preview" = "false" ]; then
      lf -remote "send $id :set preview true; set previewer ctpv; set ratios 1:2:3"
  elif [ "$lf_previewer" = "ctpv" ]; then
      lf -remote "send $id :set previewer exiftool; set ratios 1:2:3; reload"
  else
      lf -remote "send $id :set preview false; set ratios 1:5"
  fi
}}

cmd rename_random ${{
  for file in $fx; do
    new_name=$(printf "%s.%s" "$(openssl rand -hex 6)" "${file##*.}")
    mv "$file" "$new_name"
  done
}}

cmd new_files ${{ eval "ff $@" }}

cmd jumpcd ${{
  jumpdir=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)
  if [ -n "$jumpdir" ]; then
    lf -remote "send $id set hidden"
    lf -remote "send $id cd $(eval echo $jumpdir)"
  fi
}}

map r       reload
map gg      top
map D       delete
map <esc>   :quit
map /       :find_files
map ?       $fzf-grep "$PWD"
map o       $mimeopen --ask "$f"
map <c-n>   push :new_files<space>
map <enter> shell
map <c-l>   unselect
map .       set hidden!
map zp      cycle_preview
map J       jumpcd
map so      $organize
map <a-d>   ${{ setsid -f dragon-drop -x -a "$fx" }}
map <a-s>   ${{ fileshare $f }}
map <a-b>   resize-for-wallpaper
map b       $setbg $f
map V       push :!nvim<space>
map W       $setsid -f $TERMINAL >/dev/null 2>&1

map x+ ${{ chmod +x $fx; lf -remote "send $id reload" }}
map x- ${{ chmod -x $fx; lf -remote "send $id reload" }}
map xs $setsid -f live-server "$PWD" >/dev/null 2>&1
map xx $compiler $f

map E extract
map C compress

map i     :rename
map I     $vidir $fx
map <a-i> ${{ set -f; sanitizefs ${fx} }}
map <a-I> rename_random

map gh $lazygit
map gb :git_branch
map gr :git_root
map gp ${{clear; git pull --rebase || true; echo "\n\033[32mpress ENTER\033[0m"; read ENTER}}
map gs ${{clear; git status; echo "\n\033[32mpress ENTER\033[0m"; read ENTER}}
map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

map U $printf "%s" "$fx" | xclip -selection clipboard
map u $printf "%s" "$fx" | sed 's/.*\///' | xclip -selection clipboard
